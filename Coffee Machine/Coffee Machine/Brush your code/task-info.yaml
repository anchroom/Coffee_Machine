type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        public static void main(String[] args) {
            Scanner input = new Scanner(System.in);

            int numOfWater = 1200;
            int numOfMilk = 540;
            int numOfBeans = 120;
            int numOfEmptyCups = 9;
            int numOfMoney = 550;

            // show current status
            printCurrentStatus(numOfWater, numOfMilk, numOfBeans, numOfEmptyCups, numOfMoney);

            // To choose action
            System.out.println("Write action (buy, fill, take):");
            String action = input.next();
            switch (action) {
                case "buy":
                    System.out.println("What do you want to buy? 1 - espresso, 2 - latte , 3 - cappuccino;");
                    int typeOfCoffee = input.nextInt();
                    buy(numOfWater, numOfMilk, numOfBeans, numOfEmptyCups, numOfMoney, typeOfCoffee);
                    break;

                case "fill":
                    fill(numOfWater, numOfMilk, numOfBeans, numOfEmptyCups, numOfMoney);
                    break;

                case "take":
                    System.out.println("I gave you $" + numOfMoney + "\n");
                    printCurrentStatus(numOfWater, numOfMilk, numOfBeans, numOfEmptyCups, 0);
                    break;

                default:
                    throw new IllegalStateException("Unexpected value: " + action);
            }
        }

        // To print the status of coffee machine

        private static void printCurrentStatus (int numOfWater, int numOfMilk, int numOfBeans, int numOfEmptyCups, int numOfMoney){
            System.out.println("The coffee machine has:");
            System.out.println(numOfWater + " of water");
            System.out.println(numOfMilk + " of milk");
            System.out.println(numOfBeans + " of coffee beans");
            System.out.println(numOfEmptyCups + " of disposable cups");
            System.out.println(numOfMoney + " of money");
        }
        // Program of buy

        private static void buy (int numOfWater, int numOfMilk, int numOfBeans, int numOfEmptyCups, int numOfMoney, int typeOfCoffee) {
            // For espresso
            final int WATER_PER_ESPRESSO = 250;
            final int MILK_PER_ESPRESSO = 0;
            final int BEANS_PER_ESPRESSO = 16;
            final int PRICE_PER_ESPRESSO = 4;

            // For latte
            final int WATER_PER_LATTE = 350;
            final int MILK_PER_LATTE = 75;
            final int BEANS_PER_LATTE = 20;
            final int PRICE_PER_LATTE = 7;

            // For cappuccino
            final int WATER_PER_CAPPUCCINO = 200;
            final int MILK_PER_CAPPUCCINO = 100;
            final int BEANS_PER_CAPPUCCINO = 12;
            final int PRICE_PER_CAPPUCCINO = 6;

            switch (typeOfCoffee) {
                case 1:
                    printCurrentStatus(numOfWater - WATER_PER_ESPRESSO,
                            numOfMilk - MILK_PER_ESPRESSO,
                            numOfBeans - BEANS_PER_ESPRESSO,
                            numOfEmptyCups - 1,
                            numOfMoney + PRICE_PER_ESPRESSO);
                    break;
                case 2:
                    printCurrentStatus(numOfWater - WATER_PER_LATTE,
                            numOfMilk - MILK_PER_LATTE,
                            numOfBeans - BEANS_PER_LATTE,
                            numOfEmptyCups - 1,
                            numOfMoney + PRICE_PER_LATTE);
                    break;
                case 3:
                    printCurrentStatus(numOfWater - WATER_PER_CAPPUCCINO,
                            numOfMilk - MILK_PER_CAPPUCCINO,
                            numOfBeans - BEANS_PER_CAPPUCCINO,
                            numOfEmptyCups - 1,
                            numOfMoney + PRICE_PER_CAPPUCCINO);
                    break;

                default:
                    throw new IllegalStateException("Unexpected value: " + typeOfCoffee);
            }
        }

        private static void fill(int numOfWater, int numOfMilk, int numOfBeans, int numOfEmptyCups, int numOfMoney) {
            Scanner input = new Scanner(System.in);

            System.out.println("Write how many ml of water do you want to add:");
            int fillWater = input.nextInt();
            System.out.println("Write how many ml of milk do you want to add:");
            int fillMilk = input.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add:");
            int fillBeans = input.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            int fillCups = input.nextInt();

            printCurrentStatus(numOfWater + fillWater,
                    numOfMilk + fillMilk,
                    numOfBeans + fillBeans,
                    numOfEmptyCups + fillCups,
                    numOfMoney);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: -1
